import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from config import BOT_TOKEN, OWNER_ID, ADMIN_GROUP_ID, PAYMENT_NUMBERS
from database import init_db, SessionLocal
from models.user import get_or_create_user, UserRole
from handlers.user import register_user_handlers
from handlers.admin import register_admin_handlers
from handlers.payment import register_payment_handlers
from handlers.order import register_order_handlers

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(name)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with SessionLocal() as db:
        db_user = get_or_create_user(db, user.id, user.username, user.full_name)
        # Owner bootstrap (optional)
        if user.id == OWNER_ID and db_user.role != UserRole.OWNER:
            db_user.role = UserRole.OWNER
            db.commit()

    text = (
        "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо!\n\n"
        "ржЖржорж┐ ржПржХржЯрж┐ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржкржгрзНржп ржмрж┐ржХрзНрж░рж┐рж░ ржмржЯред\n"
        "ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рж░рж┐ржЪрж╛рж░рзНржЬ ржХрж░рзЗ ржмрж┐ржнрж┐ржирзНржи ржкржгрзНржп ржХрж┐ржирждрзЗ ржкрж╛рж░ржмрзЗржиред\n\n"
        "ЁЯзн ржХржорж╛ржирзНржбрж╕ржорзВрж╣:\n"
        "/balance - ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрзБржи\n"
        "/products - ржЙржкрж▓ржмрзНржз ржкржгрзНржпрж╕ржорзВрж╣\n"
        "/buy <product_id> <qty> - ржкржгрзНржп ржХрж┐ржирзБржи\n"
        "/deposit - ржбрж┐ржкрзЛржЬрж┐ржЯ ржХрж░рзЗ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рзБржи\n"
        "/orders - ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ рж╣рж┐рж╕рзНржЯрж░рж┐\n"
        "/admin - ржЕрзНржпрж╛ржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓ (рж╢рзБржзрзБ ржПржбржорж┐ржиржжрзЗрж░ ржЬржирзНржп)\n"
        "\nтЭУ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп: /help"
    )
    await update.message.reply_text(text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "тЭУ рж╕рж╛рж╣рж╛ржпрзНржп:\n"
        "- ржЖржЧрзЗ /deposit ржХрж░рзЗ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рзБржиред\n"
        "- рждрж╛рж░ржкрж░ /products ржжрзЗржЦрзЗ /buy ржжрж┐рзЯрзЗ ржкржгрзНржп ржХрж┐ржирзБржиред\n"
        "- ржХрзЗржирж╛рж░ ржкрж░ рж▓рж┐ржВржХ + ржЯрзЗржХрзНрж╕ржЯ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗржЗ ржкрж╛ржмрзЗржиред\n"
    )
    await update.message.reply_text(text)


def main():
    # DB init
    init_db()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Core
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    # Register handlers
    register_user_handlers(app)  # /balance, /products, /orders
    register_order_handlers(app)  # /buy
    register_payment_handlers(app, admin_group_id=ADMIN_GROUP_ID, payment_numbers=PAYMENT_NUMBERS)  # /deposit + screenshot
    register_admin_handlers(app)  # /admin

    logger.info("Bot is starting...")
    app.run_polling(close_loop=False)


if name == "main":
    main()