from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from config import ADMIN_GROUP_ID, PAYMENT_NUMBERS
from database import SessionLocal
from models.user import get_or_create_user
import services.payment_service as payment_service

async def deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ржбрж┐ржкрзЛржЬрж┐ржЯ ржХрж░рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржжрзЗржЦрж╛ржмрзЗ"""
    text = "ЁЯТ│ ржЖржкржирж╛рж░ ржбрж┐ржкрзЛржЬрж┐ржЯ ржХрж░рж╛рж░ ржирж╛ржорзНржмрж╛рж░ржЧрзБрж▓рзЛ:\n"
    for k, v in PAYMENT_NUMBERS.items():
        text += f"- {k}: {v}\n"
    text += "\nржжрзЯрж╛ ржХрж░рзЗ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛрж░ ржкрж░ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржиред"
    await update.message.reply_text(text)

async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░ржмрзЗ ржПржмржВ ржПржбржорж┐ржи ржЧрзНрж░рзБржкрзЗ ржлрж░рзЛрзЯрж╛рж░рзНржб ржХрж░ржмрзЗ"""
    if not update.message.photo:
        return
    user = update.effective_user
    with SessionLocal() as db:
        db_user = get_or_create_user(db, user.id, user.username, user.full_name)
        file_id = update.message.photo[-1].file_id
        payment = payment_service.create_deposit_request(db, db_user.id, 0, file_id)  # amount ржкрж░рзЗ ржПржбржорж┐ржи ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ рж╕рзЗржЯ ржХрж░ржмрзЗ

    caption = f"ЁЯТ░ ржирждрзБржи ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБрж░рзЛржз\n\nЁЯСд User: @{user.username}\nЁЯЖФ ID: {user.id}\n\nЁЯУ╕ Screenshot ржирж┐ржЪрзЗ:"
    await context.bot.send_photo(chat_id=ADMIN_GROUP_ID, photo=update.message.photo[-1].file_id, caption=caption)

    await update.message.reply_text("тЬЕ ржЖржкржирж╛рж░ ржбрж┐ржкрзЛржЬрж┐ржЯ ржЕржирзБрж░рзЛржз ржПржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")

def register_payment_handlers(app: Application, admin_group_id: int, payment_numbers: dict):
    app.add_handler(CommandHandler("deposit", deposit))
    app.add_handler(MessageHandler(filters.PHOTO, handle_screenshot))